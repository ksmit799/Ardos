# Console output log level.
# Options are verbose, info, warn, error or none.
log-level: verbose

# DC (Distributed Class) file paths.
# These should be kept in-sync globally.
dc-files:
  - otp.dc
  - game.dc

# Do we want distributed objects to live on this instance?
want-state-server: true

# Do we want players to be able to connect to this instance?
want-client-agent: true

# Do we want to handle database operations on this instance?
want-database: true

# Do we want database-backed distributed objects to live on this instance?
want-db-state-server: true

# Do we want metrics collection on this instance?
want-metrics: true

# Do we want a web interface running on this instance?
want-web-panel: true

# UberDOG definitions.
# Some example ones follow:
uberdogs:
  - id: 4665
    class: AuthManager
    anonymous: true # Allows un-authenticated clients to communicate with this object.

  - id: 4666
    class: ChatManager

  - id: 4667
    class: FriendsManager

# Metrics (Prometheus) configuration.
# This should be configured as a target in your Prometheus config.
metrics:
  host: 127.0.0.1
  port: 9985

# Message Director configuration.
message-director:
  # Listen configuration.
  host: 127.0.0.1
  port: 7100

  # RabbitMQ configuration.
  rabbitmq-host: 127.0.0.1
  rabbitmq-port: 5672
  rabbitmq-user: guest
  rabbitmq-password: guest

# State Server configuration.
state-server:
  channel: 1000

# Client Agent configuration.
client-agent:
  # Listen configuration.
  host: 127.0.0.1
  port: 6667

  # The logical version of the server.
  # This, along with the computed (or manual) DC hash, is used as a first point of contact to authenticate clients.
  version: dev

  # A manual override for the computed DC hash.
  # This should rarely need to be used.
  manual-dc-hash: 0xABCD1234

  # Shim's logins from Disney specific clients to an UberDOG.
  # (DoId matches AuthManager defined above.)
  # NOTE: You must build Ardos with ARDOS_USE_LEGACY_CLIENT to use this option.
  ud-auth-shim: 4665

  # Shim's chat messages from Disney specific clients to an UberDOG.
  # The original OTP server intercepted TalkPath_* field updates and
  # handled the filtering/broadcasting of those messages on the CA.
  # (DoId matches ChatManager defined above.)
  # NOTE: You must build Ardos with ARDOS_USE_LEGACY_CLIENT to use this option.
  ud-chat-shim: 4666

  # The range of channels this CA can allocate.
  channels:
    min: 1000000000
    max: 1009999999

# Database configuration.
database-server:
  channel: 4003

  # MongoDB configuration.
  mongodb-uri: mongodb://localhost:27017/ardos

  # The range of DoId's this database server can allocate.
  generate:
    min: 100000000
    max: 399999999

# Database State Server configuration.
db-state-server:
  # The channel of the database server we should use for querying.
  database: 4003

  # The range of DoId's we should be listening for.
  # Notice how this matches our database server generate range.
  ranges:
    min: 100000000
    max: 399999999
